import java.util.Stack; // Note that here we use Stack class for Stack operations

class ArithmeticExpressionEvaluator {
    public static void main(String[] args) { //driver main

        String exp = "a+b*(c^d-e)^(f+g*h)-i";

        System.out.println(infixToPostfix(exp));

    }

    static int EvaluatePostfix(char ch) { //expression evaluator
        switch (ch) {
            case '+':
            case '-':
                return 1;

            case '*':
            case '/':
                return 2;

            case '^':
                return 3;
        }
        return -1;
    }

    static String infixToPostfix(String exp) { //converter

        String result = new String(""); // initialize empty String for result

        Stack<Character> stack = new Stack<>(); // initializing empty stack

        for (int i = 0; i < exp.length(); ++i) {

            char ch = exp.charAt(i);

            if (Character.isLetterOrDigit(ch)) { // If the scanned character is an operand

                result += ch;

            } else if (ch == '(') {

                stack.push(ch);

            } else if (ch == ')') {

                while (!stack.isEmpty() && stack.peek() != '(') { //while the stack is not empty and
                    //its first element is not a "("

                    result += stack.pop();

                    if (!stack.isEmpty() && stack.peek() != '(') {

                        return "Invalid Expression"; // invalid expression

                    } else {
                        stack.pop();
                    }
                }

            } else { // an operator is encountered

                while (!stack.isEmpty() && EvaluatePostfix(ch) <= EvaluatePostfix(stack.peek())) {

                    result += stack.pop();

                }

                stack.push(ch);

            }

        }

        while (!stack.isEmpty()) { // pop all the operators from the stack

            if (stack.peek() == '(') {
                return "Invalid Expression";
            }

            result += stack.pop();

        }

        return result;

    }
}
