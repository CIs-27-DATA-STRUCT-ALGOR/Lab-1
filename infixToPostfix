import java.util.Stack;

public class ArithmeticExpressionEvaluator {

    static int EvaluatePostfix(char ch) {
        switch (ch){
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    static String infixToPostFix(String expression){

        String result = new String("");

        Stack<Character> stack = new Stack<>();

        for (int i = 0; i <expression.length() ; i++) {
            char ch = expression.charAt(i);

            if(EvaluatePostfix(ch)>0) {

                while(!stack.isEmpty() && EvaluatePostfix(stack.peek())>=EvaluatePostfix(ch)){
                    result += stack.pop();
                }

                stack.push(ch);

            } else if(ch == ')') {
                char x = stack.pop();

                while(x !='(') {
                    result += x;
                    x = stack.pop();
                }
            } else if(ch =='(') {
                stack.push(ch);
            } else {
                result += ch;
            }
        }
        for (int i = 0; i <=stack.size() ; i++) {
            result += stack.pop();
        }
        return result;
    }

    public static void main(String[] args) {
        String exp = "A+B*(C^D-E)";
        System.out.println("Infix Expression: " + exp);
        System.out.println("Postfix Expression: " + infixToPostFix(exp));
    }
